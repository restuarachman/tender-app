// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	dto "myapp/src/user/dto"

	interactiondto "myapp/src/interaction/dto"

	mock "github.com/stretchr/testify/mock"
)

// InteractionUsecase is an autogenerated mock type for the InteractionUsecase type
type InteractionUsecase struct {
	mock.Mock
}

// ShowRandomPeople provides a mock function with given fields: userId
func (_m *InteractionUsecase) ShowRandomPeople(userId uint) (dto.UserShowResponse, error) {
	ret := _m.Called(userId)

	var r0 dto.UserShowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (dto.UserShowResponse, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) dto.UserShowResponse); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(dto.UserShowResponse)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Swipe provides a mock function with given fields: userGivenId, interactionDTO
func (_m *InteractionUsecase) Swipe(userGivenId uint, interactionDTO interactiondto.InteractionWithUser) (interactiondto.InteractionUser, error) {
	ret := _m.Called(userGivenId, interactionDTO)

	var r0 interactiondto.InteractionUser
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, interactiondto.InteractionWithUser) (interactiondto.InteractionUser, error)); ok {
		return rf(userGivenId, interactionDTO)
	}
	if rf, ok := ret.Get(0).(func(uint, interactiondto.InteractionWithUser) interactiondto.InteractionUser); ok {
		r0 = rf(userGivenId, interactionDTO)
	} else {
		r0 = ret.Get(0).(interactiondto.InteractionUser)
	}

	if rf, ok := ret.Get(1).(func(uint, interactiondto.InteractionWithUser) error); ok {
		r1 = rf(userGivenId, interactionDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInteractionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewInteractionUsecase creates a new instance of InteractionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInteractionUsecase(t mockConstructorTestingTNewInteractionUsecase) *InteractionUsecase {
	mock := &InteractionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
