// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	entity "myapp/src/interaction/entity"

	mock "github.com/stretchr/testify/mock"

	userentity "myapp/src/user/entity"
)

// InteractionRepository is an autogenerated mock type for the InteractionRepository type
type InteractionRepository struct {
	mock.Mock
}

// FindByUserGivenId provides a mock function with given fields: id
func (_m *InteractionRepository) FindByUserGivenId(id uint) ([]entity.Interaction, error) {
	ret := _m.Called(id)

	var r0 []entity.Interaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.Interaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.Interaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Interaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserReceivedId provides a mock function with given fields: id
func (_m *InteractionRepository) FindByUserReceivedId(id uint) ([]entity.Interaction, error) {
	ret := _m.Called(id)

	var r0 []entity.Interaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.Interaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.Interaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Interaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCurrentInteraction provides a mock function with given fields: userId
func (_m *InteractionRepository) FindCurrentInteraction(userId uint) ([]entity.Interaction, error) {
	ret := _m.Called(userId)

	var r0 []entity.Interaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.Interaction, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.Interaction); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Interaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRandomPeople provides a mock function with given fields: userId
func (_m *InteractionRepository) FindRandomPeople(userId uint) (userentity.User, error) {
	ret := _m.Called(userId)

	var r0 userentity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (userentity.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uint) userentity.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(userentity.User)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *InteractionRepository) Save(_a0 entity.Interaction) (entity.Interaction, error) {
	ret := _m.Called(_a0)

	var r0 entity.Interaction
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Interaction) (entity.Interaction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Interaction) entity.Interaction); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Interaction)
	}

	if rf, ok := ret.Get(1).(func(entity.Interaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInteractionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewInteractionRepository creates a new instance of InteractionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInteractionRepository(t mockConstructorTestingTNewInteractionRepository) *InteractionRepository {
	mock := &InteractionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
