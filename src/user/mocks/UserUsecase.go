// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	dto "myapp/src/user/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: loginInfo
func (_m *UserUsecase) Login(loginInfo dto.UserLoginRequest) (dto.UserLoginResponse, error) {
	ret := _m.Called(loginInfo)

	var r0 dto.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserLoginRequest) (dto.UserLoginResponse, error)); ok {
		return rf(loginInfo)
	}
	if rf, ok := ret.Get(0).(func(dto.UserLoginRequest) dto.UserLoginResponse); ok {
		r0 = rf(loginInfo)
	} else {
		r0 = ret.Get(0).(dto.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.UserLoginRequest) error); ok {
		r1 = rf(loginInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: registerInfo
func (_m *UserUsecase) Register(registerInfo dto.UserRegisterRequest) (dto.UserRegisterResponse, error) {
	ret := _m.Called(registerInfo)

	var r0 dto.UserRegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserRegisterRequest) (dto.UserRegisterResponse, error)); ok {
		return rf(registerInfo)
	}
	if rf, ok := ret.Get(0).(func(dto.UserRegisterRequest) dto.UserRegisterResponse); ok {
		r0 = rf(registerInfo)
	} else {
		r0 = ret.Get(0).(dto.UserRegisterResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.UserRegisterRequest) error); ok {
		r1 = rf(registerInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateInfo, userID
func (_m *UserUsecase) Update(updateInfo dto.UserUpdateRequest, userID uint) (dto.UserUpdateResponse, error) {
	ret := _m.Called(updateInfo, userID)

	var r0 dto.UserUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UserUpdateRequest, uint) (dto.UserUpdateResponse, error)); ok {
		return rf(updateInfo, userID)
	}
	if rf, ok := ret.Get(0).(func(dto.UserUpdateRequest, uint) dto.UserUpdateResponse); ok {
		r0 = rf(updateInfo, userID)
	} else {
		r0 = ret.Get(0).(dto.UserUpdateResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.UserUpdateRequest, uint) error); ok {
		r1 = rf(updateInfo, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
